[
  {
    "objectID": "src/docs/05. About/about.html",
    "href": "src/docs/05. About/about.html",
    "title": "Team",
    "section": "",
    "text": "Diginsight is a free opensource project. Diginsight team is a team of friends (engineers, scientists…) with passion for technology, experimenting ideas and excellence.",
    "crumbs": [
      "Home",
      "About",
      "Team"
    ]
  },
  {
    "objectID": "src/docs/05. About/about.html#project-members",
    "href": "src/docs/05. About/about.html#project-members",
    "title": "Team",
    "section": "Project members",
    "text": "Project members\n\n\n\n\n\n\n\n\n\nFilippo Mineo\nMilan, Italy\n\n\n\nAlessandro Avila\nMilan, Italy\n\n\n\nDario Airoldi\nMilan, Italy",
    "crumbs": [
      "Home",
      "About",
      "Team"
    ]
  },
  {
    "objectID": "src/docs/05. About/about.html#other-contributors",
    "href": "src/docs/05. About/about.html#other-contributors",
    "title": "Team",
    "section": "Other Contributors",
    "text": "Other Contributors\nChayashree Gollahalli | Bhangalore, India Carlo Bollini | Milan, Italy Metushi Margil | Milan, Italy David Cun | Milan, Italy Maurizio Iacovella | Milan, Italy Matteo Delli Rocioli | Milan, Italy Raffaele Fanizzi | Milan, Italy",
    "crumbs": [
      "Home",
      "About",
      "Team"
    ]
  },
  {
    "objectID": "src/docs/01. Concepts/03. Configure SmartCache size, latencies, expiration, instances synchronization and RedIs integration.html",
    "href": "src/docs/01. Concepts/03. Configure SmartCache size, latencies, expiration, instances synchronization and RedIs integration.html",
    "title": "Configure SmartCache",
    "section": "",
    "text": "INTRODUCTION\ndiginsight SmartCache provides hybrid, distributed, multilevel caching based on age sensitive data management.\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Concepts",
      "Configure SmartCache"
    ]
  },
  {
    "objectID": "src/docs/01. Concepts/01. Cache data, Invalidate entries and reload cache on invalidation.html",
    "href": "src/docs/01. Concepts/01. Cache data, Invalidate entries and reload cache on invalidation.html",
    "title": "Cache, invalidation and reload",
    "section": "",
    "text": "INTRODUCTION\ndiginsight SmartCache provides hybrid, distributed, multilevel caching based on age sensitive data management.\nThis article discusses how we can use SmartCache to:\n\nCache data from a call and associate a suitable key to it\nInvalidate entries \nReload cache entries upon invalidation\n\nThe code snippets and images below are taken from the SampleWebAPI working samples within the smartcache.samples repository.\n\n\nSTEP 01 - Cache data from a call and associate a suitable key to it\nLet’s assume we need to cache data from a long latency operation such as:\npublic async Task&lt;Plant&gt; GetPlantByIdImplAsync([FromRoute] Guid id)\n{\n    using var activity = Program.ActivitySource.StartMethodActivity(logger, new { id });\n\n    var result = default(IEnumerable&lt;Plant&gt;);\n\n    // ... implementation ...\n\n    activity?.SetOutput(plant);\n    return plant;\n}\nThe result from the method executions can be cached with the following steps:\n\ninject smartCache and cacheKeyService into the current class \ncreate a new method GetPlantByIdAsync calling GetPlantByIdImplAsync by means of smartCache service\npublic async Task&lt;Plant&gt; GetPlantByIdAsync([FromRoute] Guid plantId)\n{\n    using var activity = Program.ActivitySource.StartMethodActivity(logger);\n\n    var options = new SmartCacheOperationOptions() { MaxAge = TimeSpan.FromMinutes(10) };\n    var cacheKey = new MethodCallCacheKey(cacheKeyService, typeof(PlantsController), nameof(GetPlantByIdAsync), plantId);\n\n    var plant = await smartCache.GetAsync(cacheKey, _ =&gt; GetPlantByIdImplAsync(plantId), options);\n\n    activity?.SetOutput(plant);\n    return plant;\n}\nthe smartCache.GetAsyc() call manages cached call to GetPlantByIdImplAsync:\n\ncacheKey: is the cache key class associated to the cache entry\ndelegate with the call to GetPlantByIdImplAsync is used to fetch values in case of cache miss\n(opt) options with required MaxAge allows requesting data specifying a specific age criteria: cache hit will happen only if available data is within the requested age.\n\n\ncalling GetPlantByIdAsync twice, you will get the following log where:\n\nthe first call is a cache miss with latency of &gt;1sec\nthe first call is a cache hit with latency of few ms\n\n\n\n\nalt text\n\n\n\n\nSTEP 02 - Add Invalidation support to cached calls\nAssume you are calling a cached method with the following code\npublic async Task&lt;IEnumerable&lt;Plant&gt;&gt; GetPlantsAsync()\n{\n    using var activity = Program.ActivitySource.StartMethodActivity(logger);\n\n    var options = new SmartCacheOperationOptions() { MaxAge = TimeSpan.FromMinutes(10) };\n    var cacheKey = new GetPlantByIdCacheKey(Guid.Empty);\n\n    Task&lt;IEnumerable&lt;Plant&gt;&gt; getCachedValuesAsync() =&gt;\n        smartCache.GetAsync(cacheKey, _ =&gt; GetPlantsImplAsync(), options);\n\n    var plants = await getCachedValuesAsync();\n    activity?.SetOutput(plants);\n    return plants;\n}\nYou can add support to invalidation deriving your key from IInvalidatable:\ninternal sealed record GetPlantByIdCacheKey(Guid PlantId) : IInvalidatable\n{\n    public bool IsInvalidatedBy(IInvalidationRule invalidationRule, out Func&lt;Task&gt; ic)\n    {\n        ic = null;\n        if (invalidationRule is PlantInvalidationRule pir && (PlantId == Guid.Empty || pir.PlantId == PlantId))\n        {\n            return true;\n        }\n        return false;\n    }\n}\nUpon plant creation/update/delete, you can trigger invalidation by means of smartCache.Invalidate(); call:\n\n\n\nalt text\n\n\nWhen Invalidating a plantId, all keys will be enumerated and those invalidated by the ID will be dismissed by the cache.\nCalling GetPlantsAsync after an update to the Plant, you will get a cache miss as the entry associated to the call has been dismissed.\nThe image below shows that: - after updating a Plant - the GetPlantsAsync call gets a cache miss call as its cache entry has been invalidated\n\n\n\nalt text\n\n\n\n\nSTEP 03 - Add automatic reload support to cached calls\nAssume you are calling a cached method with the following code\npublic async Task&lt;IEnumerable&lt;Plant&gt;&gt; GetPlantsAsync()\n{\n    using var activity = Program.ActivitySource.StartMethodActivity(logger);\n\n    var options = new SmartCacheOperationOptions() { MaxAge = TimeSpan.FromMinutes(10) };\n    var cacheKey = new GetPlantByIdCacheKey(cacheKeyService, Guid.Empty);\n\n    Task&lt;IEnumerable&lt;Plant&gt;&gt; getCachedValuesAsync() =&gt;\n        smartCache.GetAsync(cacheKey, _ =&gt; GetPlantsImplAsync(), options);\n    cacheKey.ReloadAsync = getCachedValuesAsync; \n\n    var plants = await getCachedValuesAsync();\n    activity?.SetOutput(plants);\n    return plants;\n}\nIn this case, getCachedValuesAsync delegate is used to load data. Also, getCachedValuesAsync is assigned to cacheKey.ReloadAsync property to enable cache entry reload, after invalidation.\nWhen Invalidating a plantId, all keys will be enumerated and those invalidated by the ID will be dismissed by the cache. If ReloadAsync delegate is available, after invalidation, the delegate is invoked to load the cache entry again.\nCalling GetPlantsAsync after an update to the Plant, this time you will get a cache hit as the entry associated to the call has been reloaded after invalidation.\nThe image below shows that:\n\nafter updating a Plant \nthe GetPlantsAsync call gets a cache hit call as its cache entry has been reloaded, after invalidation\n\n\n\n\nalt text\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Concepts",
      "Cache, invalidation and reload"
    ]
  },
  {
    "objectID": "index.html#step-01-add-a-reference-to-diginsight.smartcache",
    "href": "index.html#step-01-add-a-reference-to-diginsight.smartcache",
    "title": "Introduction",
    "section": "STEP 01: add a reference to Diginsight.SmartCache",
    "text": "STEP 01: add a reference to Diginsight.SmartCache\nIn the first step you can just add a Diginsight.SmartCache reference to your code: \nIn case of multiinstance applications Diginsight.SmartCache.Externalization.ServiceBus may be needed to support instances synchronization. In case of AspNetCore applications Diginsight.SmartCache.Externalization.AspNetCore may be useful to support dynamic MaxAge specification from http request headers.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#step-02-register-smartcache-services-into-the-startup-sequence",
    "href": "index.html#step-02-register-smartcache-services-into-the-startup-sequence",
    "title": "Introduction",
    "section": "STEP 02: register SmartCache services into the startup sequence",
    "text": "STEP 02: register SmartCache services into the startup sequence\nSmartCache services and default settings must be registered into the startup sequence ConfigureServices methdod. The code snippets below are available as working samples within the smartcache.samples repository.\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n    // (optional) reads RedIs connection string\n    services.ConfigureRedisCacheSettings(configuration); \n    ...\n    // configures Diginsight:SmartCache config section with default             \n    services.ConfigureClassAware&lt;SmartCacheCoreOptions&gt;(configuration.GetSection(\"Diginsight:SmartCache\"));\n    var smartCacheBuilder = services.AddSmartCache(configuration, environment, loggerFactory)\n                                    .AddHttp();\n\n    // (optional) ServiceBus connection \n    IConfigurationSection smartCacheServiceBusConfiguration = configuration.GetSection(\"Diginsight:SmartCache:ServiceBus\");\n    if (!string.IsNullOrEmpty(smartCacheServiceBusConfiguration[nameof(SmartCacheServiceBusOptions.ConnectionString)]) && !string.IsNullOrEmpty(smartCacheServiceBusConfiguration[nameof(SmartCacheServiceBusOptions.TopicName)]))\n    {\n        smartCacheBuilder.SetServiceBusCompanion(\n            static (c, _) =&gt;\n            {\n                IConfiguration sbc = c.GetSection(\"Diginsight:SmartCache:ServiceBus\");\n                return !string.IsNullOrEmpty(sbc[nameof(SmartCacheServiceBusOptions.ConnectionString)])\n                    && !string.IsNullOrEmpty(sbc[nameof(SmartCacheServiceBusOptions.TopicName)]);\n            },\n            sbo =&gt;\n            {\n                configuration.GetSection(\"Diginsight:SmartCache:ServiceBus\").Bind(sbo);\n                sbo.SubscriptionName = SmartCacheServiceBusSubscriptionName;\n            });\n    }\n\n    services.TryAddSingleton&lt;ICacheKeyProvider, MyCacheKeyProvider&gt;();\n\n}\nThe image below shows Diginsight.SmartCache settings with default MaxAge and Expiration values for cache entries.\n\"SmartCache\": {\n    \"MaxAge\": \"00:05:00\",\n    //\"MaxAge@...\": \"00:01:00\",\n    //\"MaxAge@...\": \"00:10:00\",\n    \"AbsoluteExpiration\": \"1.00:00\",\n    \"SlidingExpiration\": \"04:00:00\",\n    \"ServiceBus\": {\n    \"ConnectionString\": \"\", // Key Vault\n    \"TopicName\": \"smartcache-commonapi\"\n    }\n}\n\nNB. - ServiceBus configuration is required only in case of multiinstance applications where instances cache entries need to be synchronized. - RedIs configuration is required only in case external backing storage is available to save evicted cache entries. this allows reducing cache miss rate and mininize access to data sources.\n\nDiginsight.SmartCache will manage cache entries synchronization across application instances by means of the SetServiceBusCompanion. HowTo: Configure SmartCache synchronization across application instances",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#step-03-load-data-by-means-of-cacheservice",
    "href": "index.html#step-03-load-data-by-means-of-cacheservice",
    "title": "Introduction",
    "section": "STEP 03: load data by means of cacheService",
    "text": "STEP 03: load data by means of cacheService\nload your data by means of Diginsight.SmartCache cacheService\n[HttpGet(\"getplantscached\", Name = \"GetPlantsCachedAsync\")]\n[ApiVersion(ApiVersions.V_2024_04_26.Name)]\npublic async Task&lt;IEnumerable&lt;Plant&gt;&gt; GetPlantsCachedAsync()\n{\n    using var activity = Program.ActivitySource.StartMethodActivity(logger);\n\n    // defines a key for the cache entry\n    // NB. the cache key should include all imput parameters (that may cause different responses)\n    // in this case the key is defined as a record including all relevant input parameters\n    var cacheKey = new MethodCallCacheKey(cacheKeyService, \n                       typeof(PlantsController), nameof(GetPlantsCachedAsync));\n\n    // data with max-age 10 minutes is requested\n    var options = new SmartCacheOperationOptions() { MaxAge = TimeSpan.FromSeconds(600) }; \n\n    // Calls GetPlantsAsync by means of smartCache service\n    var plants = await smartCache.GetAsync(cacheKey,\n        _ =&gt; GetPlantsAsync(), \n        options);\n\n    activity.SetOutput(plants);\n    return plants;\n}\nthe image below show the log of the SampleWebApi GetPlantsCachedAsync method. The first call finds a cache miss and resolves to calling the GetPlantsAsync method. the following calla find a cache miss obtaining the result in 2/3ms instead of more than 1sec (about 1 to 1000 ratio).",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "src/LICENSE.html",
    "href": "src/LICENSE.html",
    "title": "Diginsight Smartcache",
    "section": "",
    "text": "Copyright (c) 2011-2017 GitHub Inc.\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "src/docs/01. Concepts/02. Synchronize cache entries across application instances.html",
    "href": "src/docs/01. Concepts/02. Synchronize cache entries across application instances.html",
    "title": "Synchronize entries across application instances",
    "section": "",
    "text": "INTRODUCTION\ndiginsight SmartCache provides hybrid, distributed, multilevel caching based on age sensitive data management.\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Concepts",
      "Synchronize entries across application instances"
    ]
  },
  {
    "objectID": "src/docs/01. Concepts/10. Boost application performance with age sensitive data management.html",
    "href": "src/docs/01. Concepts/10. Boost application performance with age sensitive data management.html",
    "title": "Boost application performance",
    "section": "",
    "text": "BOOST APPLICATION PERFORMANCE WITH AGE SENSITIVE DATA MANAGEMENT\nDiginsight.SmartCache introduces age sensitive data management: a new approach to managing data. In highly distributed environments, data is inherently disconnected and often loaded across multiple boundaries. For this reasons, loading data may be an expensive operation and loading data efficiently may become a critical challenge.\nNot always fresh data data is strictly needed in our applications, to obtain the expected behaviour. In many conditions, applications may work with data that is not up to date. This is a great opportunity to boost applications performance: when fresh data is not strictly required data cached from previous calls or data pre-loaded in background may be used to ensure the shortest possible latencies. \n\n\nWHAT IS AGE SENSITIVE DATA MANAGEMENT\nWith age sensitive data management, when loading data every entry is tagged with its Creation Date. Also, when accessing data, a developer can specify the maximum age that is required for it.\nIn Diginsight.SmartCache this can be done by means of the following notation:\nvar options = new SmartCacheOperationOptions() { MaxAge = TimeSpan.FromSeconds(600) };\nvar userProfile = await userProfileService.FindUserByEmailAddressAsync(context.Account.Email, options).ConfigureAwait(false);\nIf the required age for a data request is compatible with the creation date of the corresponding cache entry, data is returned from the cache (cache hit). In case the required age is not compatible with the creation date of the corresponding cache entry, the data is loaded from the remote location (cache miss) and the cache entry is updated.\nIn common caching systems, the cache entries lifetime is defined at startup (or cache entry set time) and it cannot be changed across different calls. A cache hit or a cache miss is determined by the static cache entry lifetime. With Diginsight.SmartCache the cache entry lifetime may be indefinite, and a cache hit or a cache miss is determined by the required age, provided by the developer, at every single call, depending on the application need.\n\n\nUSE CASES\nDiginsight.SmartCache can be used with the following type of data: - data that is not frequently updated (eg. configuration data or static data) - data that is updated more frequently (eg. user profile or user permissions) - data that is updated very frequently (eg. notifications, messages or real time data) \nAccessing configuration data or static data that is not frequently updated is a typical use case for all caching systems. In this cases data doesn’t change and the developer can request data with a MaxAge of hours or days (eg. MaxAge = 00:04:00, 4 hours).\nData that is updated more frequently can be accessed with a shorter MaxAge (eg. MaxAge = 300, 5 minutes). A typical example for this scenario can be access to a user profile or to user permissions. By default, changes to the User Profile or the User Permissions will not be perceived by the application for a latency of 5 minutes.\nIn some circunstances the developer may need to be sure about the exact value of such data. In these cases, the developer can just raise a request with MaxAge = 00:00. It may happen that, notifications are available for changes to the cached user profile or the user permissions. Upon such notifications, the developer may invalidate the cache entry or raise a request with MaxAge = 00:00 to load a cache entry for the same user, with the updated data. When change notifications are handled properly, even if data changes frequently, the developer can use a longer MaxAge (eg. hours or days) and take maximum benefit from the cache, still without delays upon data changes.\nAge sensitive data management becomes very useful when data changes very frequently. As an example, consider an application showing notifications, messages or real time data. When navigating across the pages speed of navigation may be a priority, so using cached data may be a good choice (still with a shorter MaxAge (eg. 120 secs)).\nIn these cases navigation will take benefit from the cache hits. After the navigation completes, the developer may raise a request with MaxAge = 00:00 to load fresh data for the user. In this way navigation will take advantage of cache hits speed and the user will still see fresh data, when the navigation ends.\n\n\nAN OPPORTUNITY FOR PERFORMANCE: CACHE WITH PRELOADING\n\n\nAN OPPORTUNITY FOR PERFORMANCE: MAXAGE PROMOTION\nSometimes, data from the past is immutable (eg. realtime data, user or devices messages). In such cases, an automatic rule can be applied to promote MaxAge to a long or indefinite value (MaxAge promotion).\nIt may happen that a query or an API call loads data from the present together with data from the past. When this happpens the request can be split automatically: - Data from the present must be loaded with the MaxAge specified by the developer. - Data from the past will take advantage of MaxAge promotion to a long or indefinite value.\nQueries to the backend will be faster and with smaller payloads.\n\n\nA OPPORTUNITY FOR PERFORMANCE: (AUTOMATIC) DATA PRELOADING\nWith age sensitive data management a new opportunity for performance is uncovered. The required age specified by the developer is of course used to determine if a cache hit or a cache miss can occur. Such required age can also be used as a time window, in the past, to preload data in background and ensure a cache hit will be obtained, when the application needs it. Diginsight.SmartCache captures this opportunity leveraging the application log to anticipate the required entries, the required maxage for them and anticipate entries preload in time for the application need.\n\n\nSUMMARY\nDiginsight.SmartCache introduces age sensitive data management: a new approach to managing data:\nWhen loading data a developer can specify the maximum age that is required for it. A cache hit or a cache miss is determined by the required age, provided at every single call and not by the cache entries lifetime that is defined at startup.\nThis allows using cache with non static data and data that is updated frequently without requiring delays in showing data changes, and always allowing easy access to fresh data whenever required.\nDiginsight.SmartCache allows MaxAge promotion and (automatic) data preloading techniques as great opportunities to boost application performance.\n.\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Concepts",
      "Boost application performance"
    ]
  }
]